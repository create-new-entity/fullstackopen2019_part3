{"version":3,"sources":["services/persons.js","components/SearchFilter.js","components/InputForm.js","components/Contacts.js","components/Notification.js","index.js"],"names":["dbURL","axios","get","then","response","data","catch","error","id","personObj","put","post","delete","SearchFilter","filterStr","filterHandler","className","value","onChange","InputForm","inputSubmitHandler","inputChangedHandler","newName","setNewName","newPhone","setNewPhone","onSubmit","type","Contacts","persons","deleteHandler","setPersons","filter","person","name","toLowerCase","startsWith","contactComponents","length","map","index","key","phone","onClick","Notification","message","styleClass","result","getANonAssignedId","i","assignedIds","includes","App","useState","setFilterStr","show","notification","setNotification","useEffect","backEndFns","notificationComponent","event","preventDefault","target","found","findIndex","console","log","window","confirm","newObj","hasOwnProperty","setTimeout","newPersons","err","concat","setNewNameOrPhoneFn","foundIndex","splice","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.81f36675.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nlet dbURL = \"/api/persons\";\r\n\r\nconst getDBData = () => {\r\n    return axios\r\n            .get(dbURL)\r\n            .then((response) => response.data )\r\n            .catch((error) => error.response.data);\r\n}\r\n\r\nconst updateDBData = (id, personObj) => {\r\n    return axios\r\n            .put(dbURL+`/${id}`, personObj)\r\n            .then((response) => response.data)\r\n            .catch((error) => error.response.data);\r\n};\r\n\r\nconst createDBData = (personObj) => {\r\n    return axios\r\n            .post(dbURL, personObj)\r\n            .then((response) => response.data)\r\n            .catch((error) => error.response.data);\r\n};\r\n\r\nconst deleteDBData = (id) => {\r\n    return axios\r\n            .delete(dbURL + `/${id}`)\r\n            .then((response) => response.data)\r\n            .catch((error) => error.response.data);\r\n}\r\n\r\n\r\nexport default {\r\n    getDBData,\r\n    updateDBData,\r\n    createDBData,\r\n    deleteDBData\r\n};","import React from 'react';\r\nimport './../index.css';\r\n\r\nconst SearchFilter = ({filterStr, filterHandler}) => {\r\n    return (\r\n        <div className=\"ownSection\">\r\n            <p>Filter Shown With:</p>\r\n            <input value={filterStr} onChange={filterHandler}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchFilter;","import React from 'react';\r\nimport './../index.css';\r\n\r\nconst InputForm = ({inputSubmitHandler, inputChangedHandler, newName, setNewName, newPhone, setNewPhone}) => {\r\n    return (\r\n        <form onSubmit={inputSubmitHandler} className=\"ownSection\">\r\n            <div>\r\n            Name: <input value={newName} onChange={inputChangedHandler(setNewName)}/>\r\n            <br></br>\r\n            Phone: <input value={newPhone} onChange={inputChangedHandler(setNewPhone)}/>\r\n            </div>\r\n            <div>\r\n            <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default InputForm;","import React from 'react';\r\nimport './../index.css';\r\n\r\nconst Contacts = ({persons, filterStr, deleteHandler, setPersons}) => {\r\n    if(filterStr){\r\n        persons = persons.filter((person) => {\r\n            return person.name.toLowerCase().startsWith(filterStr.toLowerCase());\r\n        });\r\n    }\r\n    let contactComponents = null;\r\n    if(persons.length){\r\n        contactComponents = persons.map((person, index) => {\r\n            return (\r\n                <div key={index} className=\"contactDiv\">\r\n                    <p>{person.name} {person.phone}</p>\r\n                    <button onClick={deleteHandler(person.id, setPersons)}>Delete</button>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n    return (\r\n        <div className=\"ownSection\">\r\n            {contactComponents}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Contacts;","import React from 'react';\r\nimport './../index.css';\r\n\r\n\r\nconst Notification = ({message, result}) => {\r\n    let styleClass = 'negativeNotification';\r\n    \r\n    if(result === 'positive') styleClass = 'positiveNotification';\r\n\r\n    return (\r\n        <p className={styleClass}>{message}</p>\r\n    );\r\n};\r\n\r\n\r\nexport default Notification;","import React, { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport backEndFns from './services/persons';\r\nimport SearchFilter from './components/SearchFilter';\r\nimport InputForm from './components/InputForm';\r\nimport Contacts from './components/Contacts';\r\nimport Notification from './components/Notification';\r\n\r\n\r\n\r\nfunction getANonAssignedId(persons){\r\n    let i = 0;\r\n    let assignedIds = persons.map((person) => person.id);\r\n\r\n    while(true){\r\n        if(assignedIds.includes(i)) i++;\r\n        else break;\r\n    }\r\n\r\n    return i;\r\n}\r\n\r\nconst App = () => {\r\n    const [persons, setPersons] = useState([]);\r\n    const [ newName, setNewName ] = useState('');\r\n    const [ newPhone, setNewPhone ] = useState('');\r\n    const [ filterStr, setFilterStr ] = useState('');\r\n    const [ notification, setNotification ] = useState({show: false});\r\n\r\n    useEffect(() => {\r\n        backEndFns\r\n            .getDBData()\r\n            .then((persons) => {\r\n                setPersons(persons);\r\n            });\r\n    }, []);\r\n\r\n    const inputChangedHandler = (setNewNameOrPhoneFn) => {\r\n        return (event) => {\r\n            setNewNameOrPhoneFn(event.target.value);\r\n        };\r\n    };\r\n\r\n    const inputSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        backEndFns\r\n            .getDBData()\r\n            .then((persons) => {\r\n                let found = persons.findIndex((person) => person.name === newName);\r\n                console.log(persons);\r\n                if(found !== -1){\r\n                    let choice = window.confirm(`Contact ${persons[found].name} already exists. Do you want to update?`);\r\n                    if(choice){\r\n                        let newObj = {\r\n                            name: persons[found].name,\r\n                            phone: newPhone\r\n                        }\r\n                        backEndFns\r\n                            .updateDBData(persons[found].id, newObj)\r\n                            .then((newObj) => {\r\n                                if(newObj.hasOwnProperty('error')){\r\n                                    setNotification({show: true, message: newObj.error, result: 'negative'});\r\n                                    setTimeout(() => {\r\n                                        setNotification({show: false});\r\n                                    }, 4000);\r\n                                }\r\n                                else{\r\n                                    let newPersons = [...persons];\r\n                                    newPersons[found] = newObj;\r\n                                    setPersons(newPersons);\r\n                                    setNewName('');\r\n                                    setNewPhone('');\r\n                                    setNotification({show: true, message: 'Successfully updated.', result: 'positive'});\r\n                                    setTimeout(() => {\r\n                                        setNotification({show: false});\r\n                                    }, 2000);\r\n                                }\r\n                            });\r\n                    }\r\n                    else {\r\n                        backEndFns\r\n                            .getDBData()\r\n                            .then((persons) => {\r\n                                setNewName('');\r\n                                setNewPhone('');\r\n                                setPersons(persons);\r\n                            })\r\n                            .catch((err) => {\r\n                                console.log('Data fetching failed.');\r\n                            });\r\n                    }\r\n                }\r\n                else {\r\n                    let newObj = {\r\n                        name: newName,\r\n                        phone: newPhone,\r\n                        id: getANonAssignedId(persons)\r\n                    }\r\n                    backEndFns\r\n                        .createDBData(newObj)\r\n                        .then((newObj) => {\r\n                            if(newObj.hasOwnProperty('error')){\r\n                                setNotification({show: true, message: newObj.error, result: 'negative'});\r\n                                setTimeout(() => {\r\n                                    setNotification({show: false});\r\n                                }, 4000);\r\n                            }\r\n                            else{\r\n                                setPersons(persons.concat(newObj));\r\n                                setNewName('');\r\n                                setNewPhone('');\r\n                                setNotification({show: true, message: 'Entry successfully created.', result: 'positive'});\r\n                                setTimeout(() => {\r\n                                    setNotification({show: false});\r\n                                }, 2000);\r\n                            }\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(error.message);\r\n                        });\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log('Data fetching failed');\r\n            });\r\n    };\r\n\r\n    const filterHandler = (event) => {\r\n        event.preventDefault();\r\n        setFilterStr(event.target.value);\r\n    };\r\n\r\n    const deleteHandler = (id, setPersons) => {\r\n        return () => {\r\n            let foundIndex = persons.findIndex((person) => person.id === id);\r\n            if(foundIndex !== -1){\r\n                let choice = window.confirm(`Delete ${persons[foundIndex].name}?`);\r\n                if(choice){\r\n                    backEndFns\r\n                        .deleteDBData(id)\r\n                        .then(() => {\r\n                            let newPersons = [...persons];\r\n                            newPersons.splice(foundIndex, 1);\r\n                            setPersons(newPersons);\r\n                            setNotification({show: true, message: 'Entry successfully deleted.', result: 'negative'});\r\n                            setTimeout(() => {\r\n                                setNotification({show: false});\r\n                            }, 2000);\r\n                        })\r\n                        .catch((error) => {\r\n                            setNotification({show: true, message: 'Entry had already been deleted.', result: 'negative'});\r\n                            setTimeout(() => {\r\n                                setNotification({show: false});\r\n                            }, 2000);\r\n\r\n                            backEndFns\r\n                                .getDBData()\r\n                                .then((newPersons) => {\r\n                                    setPersons(newPersons);\r\n                                    setNewName('');\r\n                                    setNewPhone('');\r\n                                })\r\n                                .catch((error) => {\r\n                                    console.log('Data fetching failed');\r\n                                });\r\n                        });\r\n                }\r\n            }\r\n            else{\r\n                alert('Name not found....'); // Never gonna happen.\r\n            }   \r\n        };\r\n    };\r\n\r\n    let notificationComponent = null;\r\n    if(notification.show){\r\n        notificationComponent = (\r\n            <Notification message={notification.message} result={notification.result}></Notification>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Phonebook</h2>\r\n            <SearchFilter filterStr={filterStr} filterHandler={filterHandler}/>\r\n            <h2>Add a new contact</h2>\r\n            <InputForm inputSubmitHandler={inputSubmitHandler} inputChangedHandler={inputChangedHandler} newName={newName} setNewName={setNewName} newPhone={newPhone} setNewPhone={setNewPhone}></InputForm>\r\n            {notificationComponent}\r\n            <h2>Numbers</h2>\r\n            <Contacts persons={persons} filterStr={filterStr} deleteHandler={deleteHandler} setPersons={setPersons}></Contacts>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}